#!/usr/bin/env ruby

require 'set'

h = {
  "command" => ["value1", "value2"]
}

def mark(h)
  h.inject({}) do |new_h, (k, vs)|
    new_h.merge!(k => vs.dup)
  end
end

def diff(original, current)
  current.inject({}) do |changes, (k, v)|
    old_v = original[k] || []
    changes[k] = v - old_v unless old_v == v

    changes
  end
end

def exit_with_usage(message)
  puts message
  puts "Usage:"
  puts "  #{$0} log_file command_type"
  exit(1)
end

log_file = ARGV[0] or exit_with_usage("must specify a log file")
command_type = ARGV[1] or exit_with_usage("must specify a command type")

def get_downs(log_file)
  # 1389591942.072715000  0x01  0 3 76:08:08
  # 1389591942.088339000  0x81  1 5 54:f4:79:41:06

  log_output = File.read(log_file).split("\n")

  command_byte_sets = Set.new
  log_output.each do |line|
    time, endpoint, direction, length, bytes = line.split(/\s+/)
    command_byte_sets << bytes
  end

  command_byte_sets.sort_by { |s| [s.size, s.gsub(':', '').hex] }
end

def begin_ux_loop
  Thread.new do
    $app_state = :read

    loop do
      print "> "
      work = $stdin.gets
      case work
      when /^f(orget)?$/
        $app_state = :forget
      when /^h(alt)?$/
        $app_state = :halt
      when /^r(ead)?$/
        $app_state = :read
      when /^o(pen)?$/
        $app_state = :open
      when /^d(iff)?$/
        $app_state = :diff
      when /^q(uit)?$/
        $app_state = :quit
      when /^c(urrent)?$/
        $app_state = :current
      else
        puts "Current state: #{$app_state}"
        puts "Didn't understand #{work.chomp}, commands:"
        puts "  halt"
        puts "  read"
        puts "  diff"
        puts "  quit"
      end
    end
  end
end

def dump_command_info(command_info)
  command_info.sort_by { |r, vs| [r.size, r] }.each do |req, values|
    puts req
    values.each do |ts, bytes|
      puts "  #{ts}: #{bytes}"
    end
  end
end

DOWN_DIR = "0"
UP_DIR = "1"

def begin_work_loop(filename)
  begin
    # Config
    device = 3

    file = File.open(filename, 'r')
    seeking = true

    command_info = {}
    previous_command_info = {}

    request_timestamp = nil
    response_timestamp = nil

    request_bytes = []
    response_bytes = []

    loop do
      case $app_state
      when :halt
        sleep(1)

      when :open
        file.close
        file = File.open(filename, 'r')
        $app_state = :read
      when :forget
        seeking = true

        command_info = {}
        previous_command_info = {}

        request_timestamp = nil
        response_timestamp = nil

        request_bytes = []
        response_bytes = []
        $app_state = :read
      when :quit
        puts "quit"
        break
      when :current
        $app_state = :read # minor race condition here, but whatever
        puts "==Current Info=="
        dump_command_info(command_info)
      when :diff
        $app_state = :read # minor race condition here, but whatever
        puts "==Diffing=="

        command_diff = diff(previous_command_info, command_info)
        dump_command_info(command_diff)

        previous_command_info = mark(command_info)
      when :read
        unless (line = file.readline rescue nil)
          sleep(1)
          next
        end
        last_line = line

        time, endpoint, direction, length, bytes = line.split(/\s+/)

        if direction == DOWN_DIR
          seeking = false

          if !request_bytes.empty?
            response_sets = (command_info[request_bytes] ||= [])
            if !response_bytes.empty? &&
                (response_sets.last.nil? ||
                  response_sets.last.last != response_bytes)
              puts "#{request_timestamp}: #{request_bytes} => #{response_bytes}"
              response_sets << [response_timestamp, response_bytes]
            end
          end

          request_timestamp = time
          request_bytes = bytes

          next
        elsif seeking
          # no-op, waiting for a down
          next
        elsif direction == UP_DIR
          response_timestamp = time
          response_bytes = bytes
        end
      end
    end
  ensure
    file.close if file
  end
end

case command_type
when "watch"
  puts "watching #{log_file}"
  begin_ux_loop
  begin_work_loop(log_file)
when "downs"
  command_byte_sets = get_downs(log_file)
  puts "#{command_byte_sets.size} Down commands"
  puts command_byte_sets.join("\n")
when "send_recv_pairs"
  signal_string = ARGV[2..ARGV.size].join(" ")
  signals = if signal_string == "all"
    command_byte_sets = get_downs(log_file)
    puts "Will analyze #{command_byte_sets.size} signals"
    command_byte_sets
  else
    [signal_string]
  end

  signals.each do |signal|
    puts signal

    # 1389591942.057090000  0x01  0 3 76:10:10
    # 1389591942.057090000  0x81  1 5 01:00:00:00:06
    # --
    number_of_context_lines_to_pull = 1
    grep_command = "grep -A #{number_of_context_lines_to_pull} -E '#{DOWN_DIR} [0-9] #{signal}$' #{log_file}"
    log_output = `#{grep_command}`
    log_lines = log_output.split("\n")

    count = 0
    response_sets = []

    log_sets = []
    log_set = []
    log_lines.each_slice(3) do |log_set|
      next if log_set.size < 3

      count += 1

      response_line = log_set[1]

      response_line_timestamp, endpoint, direction, length, response_bytes = response_line.split(/\s+/)

      if response_sets.last.nil? || response_sets.last.last != response_bytes
        response_sets << [response_line_timestamp, response_bytes]
      end
    end
    puts "  #{response_sets.size} variants, #{count} matches:"
    puts "    " + response_sets.map { |line, result| [line, result].join(": ")}.join("\n    ")
  end
else
  puts "Unknown command_type #{command_type}"
  exit(1)
end